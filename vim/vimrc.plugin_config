"---------------------------------------------
" PLUGIN: ULTISNIPS {{{
"---------------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
"---------------------------------------------
" }}} PLUGIN: ULTISNIPS
"---------------------------------------------

"---------------------------------------------
" PLUGIN: root.vim {{{
"---------------------------------------------
let g:root#auto = 1
let g:root#echo = 0
"---------------------------------------------
" }}} PLUGIN: root.vim
"---------------------------------------------

"---------------------------------------------
" PLUGIN: vim-go {{{
"---------------------------------------------
set autowrite

let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_build_constraints = 1

nmap <C-g> :GoDeclsDir<CR>
imap <C-g> <ESC>:<C-u>GoDeclsDir<CR>

" Go specific mappings
augroup go
  autocmd!
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>r <Plug>(go-run)
  autocmd FileType go nmap <leader>d <Plug>(go-doc)
  autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <leader>C <Plug>(go-coverage-browser)
  autocmd FileType go nmap <leader>i <Plug>(go-info)
  autocmd FileType go nmap <leader>l <Plug>(go-metalinter)
  autocmd FileType go nmap <leader>v <Plug>(go-def-vertical)
  autocmd FileType go nmap <leader>s <Plug>(go-def-split)
  autocmd FileType go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd FileType go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd FileType go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd FileType go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#cmd#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
"---------------------------------------------
" }}} PLUGIN: vim-go
"---------------------------------------------

"---------------------------------------------
" PLUGIN: copilot {{{
"---------------------------------------------
" Smart <Tab>: Copilot if visible, else snippet or completion
inoremap <silent><expr> <Tab>
  \ pumvisible() ? '<C-n>' :
  \ (exists('*copilot#Accept') && copilot#Visible()) ? copilot#Accept("\<CR>") :
  \ UltiSnips#CanExpandSnippet() ? '<C-R>=UltiSnips#ExpandSnippet()<CR>' :
  \ '<Tab>'

"---------------------------------------------
" }}} PLUGIN: copilot
"---------------------------------------------

"---------------------------------------------
" PLUGIN: vim-airline {{{
"---------------------------------------------
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"---------------------------------------------
" }}} PLUGIN: vim-airline
"---------------------------------------------

"---------------------------------------------
" PLUGIN: Markdown Preview {{{
"---------------------------------------------
"let vim_markdown_preview_toggle=1
let vim_markdown_preview_github=1
let vim_markdown_preview_browser='Google Chrome'
"---------------------------------------------
" }}} PLUGIN: Markdown Preview
"---------------------------------------------

"---------------------------------------------
" PLUGIN: Sequence Diagram {{{
"---------------------------------------------
" Sequence Diagram Theme
let g:generate_diagram_theme_hand=1
"---------------------------------------------
" }}} PLUGIN: Sequence Diagram
"---------------------------------------------

"---------------------------------------------
" WORD PROCESSOR MODE {{{
"---------------------------------------------
func! WordProcessorMode()
  setlocal formatoptions=1
  setlocal noexpandtab
  map j gj
  map k gk
  setlocal spell spelllang=en_us
  set thesaurus+=/Users/gsantovena/.vim/thesaurus/mthesaur.txt
  set complete+=s
  set formatprg=par
  setlocal wrap
  setlocal linebreak
endfu
com! WP call WordProcessorMode()
"---------------------------------------------
" }}} WORD PROCESSOR MODE
"---------------------------------------------

"---------------------------------------------
" DDC (Shougo's Completion Engine) {{{
"---------------------------------------------
" Use native UI
call ddc#custom#patch_global('ui', 'native')
" Use around source
call ddc#custom#patch_global('sources', ['around'])
" Use matcher_head and sorter_rank
call ddc#custom#patch_global('sourceOptions', #{
      \ _: #{
      \   matchers: ['matcher_head'],
      \   sorters: ['sorter_rank']},
      \ })
" Change source options
call ddc#custom#patch_global('sourceOptions', #{
      \   around: #{ mark: 'A' },
      \ })
call ddc#custom#patch_global('sourceParams', #{
      \   around: #{ maxSize: 500 },
      \ })
" Customize settings per filetype
call ddc#custom#patch_filetype(['c', 'cpp'], 'sources',
      \ ['around', 'clangd'])
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', #{
      \   clangd: #{ mark: 'C' },
      \ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', #{
      \   around: #{ maxSize: 100 },
      \ })
" Use ddc
call ddc#enable()

" DDC Mappings
inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-h>'
"---------------------------------------------
" }}} DDC (Shougo's Completion Engine)
"---------------------------------------------


